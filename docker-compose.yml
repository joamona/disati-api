services:
  postgis:
    #The build:
    #   Copy the backup
    #   Copy a script to execute the backup
    #   Create the user vagrant
    #   Execute the backup
    build: postgis
    restart: "no"
    env_file:
      - .env.dev
    ports:
      - ${DEVELOP_DOCKER_POSTGIS_FORWARDED_PORT}:5432
    volumes: 
      - postgis-data:/var/lib/postgresql/data

    #to ckeck if postgres is already ready. It is used in the depends_on section
    #of the services that use this service.
    #IMPORTANT. 
    #   - The user postgres must exist
    #   - The database postgres must exist, but this is always true,
    #     despite you create an other one in the POSTGRES_DB variable
    healthcheck:
        test: [ "CMD", "pg_isready", "-q", "-d", "postgres", "-U", "postgres" ]
        interval: 10s
        timeout: 5s
        retries: 5
    networks:
      - postgis

  disatidjangoapi:
    restart: "no"
    build: ./disatidjangoapi
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ./disatidjangoapi:/usr/src/app
    ports:
      - ${DEVELOP_DOCKER_DJANGO_API_FORWARDED_PORT}:8000
    env_file:
      - .env.dev
    networks:
      - postgis

    #to ckeck if postgres is already ready. This service
    #will not start up to the posgis service is ready
    depends_on:
      postgis:
        condition: service_healthy
networks:
   postgis:
      driver: bridge
#coment
volumes:
  postgis-data:
    driver: local
